# steps:
# # This step builds the container image.
# - name: 'gcr.io/cloud-builders/docker'
#   id: Build
#   args:
#   - 'build'
#   - '-t'
#   - 'us-central1-docker.pkg.dev/rosy-acolyte-412215/repo-of-ci/images-ci'
#   - '.'

# # This step pushes the image to Artifact Registry
# # The PROJECT_ID and SHORT_SHA variables are automatically
# # replaced by Cloud Build.
# - name: 'gcr.io/cloud-builders/docker'
#   id: Push
#   args:
#   - 'push'
#   - 'us-central1-docker.pkg.dev/rosy-acolyte-412215/repo-of-ci/images-ci'


# # Esta etapa clona el repositorio DevOps-CI-CD de GitHub
# - name: 'gcr.io/cloud-builders/git'
#   id: Clone DevOps-CI-CD repository
#   args: ['clone', 'https://github.com/perodriguez1630/DevOps-CI-CD.git', 'repo-of-ci']

# # Esta etapa hace el despliegue en cloud run
# - name: 'gcr.io/cloud-builders/gcloud'
#   args:
#   - 'run'
#   - 'deploy'
#   - 'cloud-run-ci-cd'
#   - '--image=us-central1-docker.pkg.dev/rosy-acolyte-412215/repo-of-ci/images-ci'
#   - '--platform=managed'
#   - '--region=us-central1'


steps:
# Paso 1: Construir y empaquetar tu aplicación en una imagen de máquina virtual
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'build'
  - '-t'
  - 'gcr.io/rosy-acolyte-412215/image-gce-test'
  - '.'

# Paso 2: Subir la imagen a Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/rosy-acolyte-412215/image-gce-test']

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod +x ./deploy-script.sh && ./deploy-script.sh


# # Paso 3: Despliegue en Compute Engine (ejemplo)
# - name: 'gcr.io/cloud-builders/gcloud'
#   args:
#   - 'compute'
#   - 'instances'
#   - 'create-with-container'
#   - 'instance-gce-test'
#   - '--zone=us-central1-b'
#   - '--container-image=gcr.io/rosy-acolyte-412215/image-gce-test'
#   # Ajusta otras configuraciones según sea necesario, como el tamaño de la instancia y las etiquetas.


